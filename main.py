import telebot
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import logging
import time
import random
from selenium.webdriver.common.by import By
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API —Ç–æ–∫–µ–Ω
API_TOKEN = '7368730334:AAH9xUG8G_Ro8mvV_fDQxd5ddkwjxHnBoeg'

bot = telebot.TeleBot(API_TOKEN)

user_data = {}

def transliterate_name(full_name):
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'h', '“ë': 'g', '–¥': 'd', '–µ': 'e', '—î': 'ie',
        '–∂': 'zh', '–∑': 'z', '–∏': 'y', '—ñ': 'i', '—ó': 'i', '–π': 'i', '–∫': 'k', '–ª': 'l',
        '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch', '—å': '',
        '—é': 'iu', '—è': 'ia',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'H', '“ê': 'G', '–î': 'D', '–ï': 'E', '–Ñ': 'Ie',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'Y', '–Ü': 'I', '–á': 'I', '–ô': 'I', '–ö': 'K', '–õ': 'L',
        '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch', '–¨': '',
        '–Æ': 'Iu', '–Ø': 'Ia'
    }
    
    transliterated = ''.join(translit_dict.get(char, char) for char in full_name)
    formatted_name = transliterated.lower().replace(" ", "_")
    return formatted_name

def get_parsed_text(url, full_name):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 11.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36")
    
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    
    try:
        driver.get(url)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")
        time.sleep(random.uniform(2, 5))
        
        search_input = driver.find_element(By.CSS_SELECTOR, 'input[class="SearchNameInput_input__M6_k8"]')
        search_input.send_keys(full_name)
        logger.info(f"–§–ò–û –≤–≤–µ–¥–µ–Ω–æ: {full_name}")
        
        time.sleep(5)

        buttons = driver.find_elements(By.TAG_NAME, 'button')
        filtered_buttons = []
        if buttons:
            for button in buttons:
                button_text = button.text.strip()
                if button_text not in ["–ü–æ—à—É–∫ –∑–∞ –ü.–Ü.–ë.", "–ü–æ—à—É–∫ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"] and button_text:
                    filtered_buttons.append(button_text)
            
            if filtered_buttons:
                parsed_text = f"–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª—é–¥–∏:\n" + "\n".join(filtered_buttons)
                logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(filtered_buttons)} –∫–Ω–æ–ø–æ–∫.")
            else:
                logger.info("–ù—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                parsed_text = "–ù—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            logger.info("–ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            parsed_text = "–ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        return parsed_text, filtered_buttons

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return None, None

    finally:
        driver.quit()

def create_inline_keyboard(button_texts):
    keyboard = InlineKeyboardMarkup()
    for text in button_texts:
        transliterated_text = transliterate_name(text).replace("'", "")
        callback_data = f"parse_{transliterated_text}"
        keyboard.add(InlineKeyboardButton(text, callback_data=callback_data))
    return keyboard

def parse_full_page_text(url):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 11.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36")
    
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    
    try:
        driver.get(url)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {url}")
        
        wait = WebDriverWait(driver, 10)
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
        
        page_text = driver.find_element(By.TAG_NAME, "body").text
        
        unwanted_strings = [
            "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö",
            "Telegram-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞",
            "–ü–Ü–ë-–ø–æ—à—É–∫",
            "–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º",
            "dolg.xyz 2024",
            "–†–µ—î—Å—Ç—Ä —Å—É–¥–æ–≤–∏—Ö —Ä—ñ—à–µ–Ω—å",
            "–õ–æ–≥—ñ–Ω",
            "–ë–∞–∑–∞ —É—Ö–∏–ª—è–Ω—Ç—ñ–≤",
            "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É",
            "–£–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è",
            "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
            "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–æ–º"
        ]
        
        filtered_text = '\n'.join(line for line in page_text.split('\n') if line.strip() not in unwanted_strings)
        
        logger.info("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.")
        return filtered_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        return None
    finally:
        driver.quit()

def format_output(text):
    lines = text.split('\n')
    formatted_output = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n‚îÇ\n"
    indent = "‚îÇ   "
    current_indent = ""

    for line in lines:
        if "–°—É–¥–æ–≤–∏–π —Ä–µ—î—Å—Ç—Ä:" in line:
            formatted_output += f"{indent}‚îî‚îÄ‚îÄ {line}\n"
            current_indent = indent + "    "
        elif any(case in line for case in ["–ê–¥–º—ñ–Ω–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è", "–¶–∏–≤—ñ–ª—å–Ω–µ", "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ", "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ"]):
            if "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ" in line:
                formatted_output += f"{current_indent}‚îî‚îÄ‚îÄ üî¥ {line}\n"
            elif "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ" in line:
                formatted_output += f"{current_indent}‚îî‚îÄ‚îÄ üü¢ {line}\n"
            elif "–ê–¥–º—ñ–Ω–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è" in line:
                formatted_output += f"{current_indent}‚îî‚îÄ‚îÄ üü° {line}\n"
            elif "–¶–∏–≤—ñ–ª—å–Ω–µ" in line:
                formatted_output += f"{current_indent}‚îî‚îÄ‚îÄ üîµ {line}\n"
            current_indent += "    "
        elif "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:" in line:
            formatted_output += f"{current_indent}‚îî‚îÄ‚îÄ {line}\n"
            current_indent += "    "
        elif "–ü–æ–≤'—è–∑–∞–Ω—ñ" in line:
            formatted_output += f"{current_indent}‚îî‚îÄ‚îÄ {line}\n"
            current_indent += "    "
        else:
            formatted_output += f"{current_indent}‚îî‚îÄ‚îÄ {line}\n"

    return formatted_output

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ.")

@bot.message_handler(func=lambda message: True)
def handle_name(message):
    user_data[message.chat.id] = message.text.strip()
    full_name = user_data[message.chat.id]
    url = "https://dolg.xyz"
    
    parsed_text, button_texts = get_parsed_text(url, full_name)
    
    if parsed_text and button_texts:
        bot.send_message(message.chat.id, parsed_text, reply_markup=create_inline_keyboard(button_texts))
    else:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('parse_'))
def callback_query(call):
    transliterated_name = call.data.split('_', 1)[1]
    url = f"https://dolg.xyz/ukr/{transliterated_name}"
    
    bot.answer_callback_query(call.id, "–ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    parsed_text = parse_full_page_text(url)
    
    if parsed_text:
        formatted_text = format_output(parsed_text)
        max_message_length = 4096
        for i in range(0, len(formatted_text), max_message_length):
            part = formatted_text[i:i+max_message_length]
            bot.send_message(call.message.chat.id, part)
    else:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

bot.polling()
